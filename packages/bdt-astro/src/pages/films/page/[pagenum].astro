---
import BaseLayout from '../../../layouts/BaseLayout.astro'
import Stack from '@components/layouts/stack/stack.tsx'
import MediaObject from "@components/compositions/media-object.tsx";

import { request, gql } from 'graphql-request';

export async function getAllPages(pageSize: number) {
  const getNextPage = async (after?: string) => await request('https://breakfastdinnertea.co.uk/graphql', query, {"first": pageSize, "after": after ? after : ""}).then((data) => {return {meta: data.films.pageInfo}})
  const countToObject = (count: number, meta) => { return {params: {pagenum: count.toString()}, props: {after: meta.endCursor}}};

  const paths = [];
  const query = gql`
    query nextPage($first: Int, $after: String) {
      films(where: {orderby: {field: DATE_WATCHED, order: DESC}}, first: $first, after: $after) {
        pageInfo {
          endCursor
          startCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  `;

  let count = 2;
  let {meta} = await getNextPage();
  paths.push({params: {pagenum: "1"}})

  while(meta.hasNextPage) {
    paths.push(countToObject(count++, meta));
    ({meta} = await getNextPage(meta.endCursor));
  }

  return paths;
};

export async function getStaticPaths() {
  return await getAllPages(10);
}

const {after} = Astro.props;

const filmQuery = gql`
{
  films(where: {orderby: {field: DATE_WATCHED, order: DESC}}, first: 10, after: "${after ? after : ''}") {
    nodes {
      watchedDate
      filmTitle
      year
      rating
      reviewLink
      content(format: RENDERED)
      meta {
        image
        runtime
        original_language
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
`
const {films, next} = await request('https://breakfastdinnertea.co.uk/graphql', filmQuery).then((data) => {return {films: data.films.nodes, next: data.films.pageInfo}})

---
<BaseLayout>
  <Stack>
  <h1>Films</h1>
  {films.map(film => (
    <MediaObject imgObj={{
      src: film.meta.image,
      alt:`Poster for '${film.filmTitle}'`
    }}>
      <header>
        <h2>{film.filmTitle} ({film.year})</h2>
      </header>
      <dl>
        <dt>Viewed</dt>
        <dd>
          <time className="dt-published" dateTime={film.watchedDate}>
            {new Date(film.watchedDate).toDateString()}
          </time>
        </dd>
        <dt>Rated</dt>
        <dd>{film.rating}/5</dd>
      </dl>
      {film.content && (
        <a href={film.reviewLink}>I wrote some thoughts on Letterboxd</a>
      )}
    </MediaObject>
  ))}
  </Stack>
</BaseLayout>