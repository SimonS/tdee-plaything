---
import { request, gql } from 'graphql-request';
import BaseLayout from '../layouts/BaseLayout.astro'
import Stack from '@components/layouts/stack/stack.tsx'
import MediaObject from "@components/compositions/media-object.tsx";
import Pagination from "@components/pagination/pagination.tsx";

const query = gql`
{
  films(where: {orderby: {field: DATE_WATCHED, order: DESC}}, first: 10) {
    nodes {
      watchedDate
      filmTitle
      year
      rating
      reviewLink
      content(format: RENDERED)
      meta {
        image
        runtime
        original_language
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
`

const {films, meta} = await request('https://breakfastdinnertea.co.uk/graphql', query).then((data) => {return {films: data.films.nodes, meta: data.films.pageInfo}})
---

<BaseLayout>
  <Stack>
    <h1>Films</h1>
    {films.map(film => (
      <MediaObject imgObj={{
        src: film.meta.image,
        alt:`Poster for '${film.filmTitle}'`
      }}>
        <header>
          <h2>{film.filmTitle} ({film.year})</h2>
        </header>
        <dl>
          <dt>Viewed</dt>
          <dd>
            <time className="dt-published" dateTime={film.watchedDate}>
              {new Date(film.watchedDate).toDateString()}
            </time>
          </dd>
          <dt>Rated</dt>
          <dd>{film.rating}/5</dd>
        </dl>
        {film.content && (
          <a href={film.reviewLink}>I wrote some thoughts on Letterboxd</a>
        )}
      </MediaObject>
    ))}
    <Pagination pageNumber={1} urlRoot={`/films/page`} pageInfo={{hasNextPage: meta.hasNextPage, hasPreviousPage: meta.hasPreviousPage}} />
  </Stack>
</BaseLayout>
    